21.-¿Qué diferencia hay entre "\t\n" y ’\t\n’?

irb(main):001:0> "\t\n"
=> "\t\n" (Se interpreta como un tabulador y un salto de linea)
irb(main):002:0> '\t\n'
=> "\\t\\n" (Interpreta la cadena tal y como se muestra)


22.-¿Cómo funciona %q? ¿Qué es %q{hello world\n}? ¿Qu´e es %q{’a’ ’b’ ’c’}?

Se utiliza para la sintaxis strings.Las comillas simples es similar a % Q , pero las cadenas entre comillas simples no están sujetos a la sustitución expresión o secuencias de escape.

irb(main):007:0> %q{hello world\n}
=> "hello world\\n"

irb(main):006:0> %q{'a', 'b', 'c'}
=> "'a', 'b', 'c'"

23.-¿Cómo funciona %Q? ¿Qu´e es %Q{hello world\n}? ¿Qu´e es %Q{"a" "b" "c"}?

Esta es una alternativa para las cadenas entre comillas dobles, cuando se tiene más caracteres de comillas en un string.Instead de poner las barras invertidas delante de ellos

irb(main):008:0> %Q{hello world\n}
=> "hello world\n"

irb(main):009:0> %Q{"a" "b" "c"}
=> "\"a\" \"b\" \"c\""

24.- ¿Qué queda en c?

irb(main):005:0> a=4
=> 4
irb(main):006:0> b=2
=> 2
irb(main):007:0> c=<<HERE
irb(main):008:0" --#{a}--
irb(main):009:0" --#{b}--
irb(main):010:0" HERE
=> "--4--\n--2--\n"


25.- ¿Qué queda en c?


irb(main):011:0> a=4
=> 4
irb(main):012:0> b=2
=> 2
irb(main):013:0> c=<<'HERE'
irb(main):014:0' --#{a}--
irb(main):015:0' --#{b}--
irb(main):016:0' HERE
=> "--\#{a}--\n--\#{b}--\n"



26. s = "hello". ¿Cuál es el valor de las siguientes expresiones?

irb(main):001:0> s ="hello"
=> "hello"
irb(main):002:0> s[0,2]
=> "he"
irb(main):003:0> s[-1,1]
=> "o"
irb(main):004:0> s[0,10]
=> "hello"




27. ¿Qué queda en g?

irb(main):017:0> g ="hello"
=> "hello"
irb(main):018:0> g="world"
=> "world"


28. ¿Qué queda en e?

irb(main):019:0> e='.'*3
=> "..."


29. ¿Cuál es el resultado?

irb(main):020:0> a=1
=> 1
irb(main):021:0> 1
=> 1
irb(main):022:0> "#{a=a+1}"*3
=> "222"


30. ¿Qué es esto? %w[this is a test]

irb(main):023:0> %w[this is a test]
=> ["this", "is", "a", "test"]

